[
  {
    "slug": "openhab",
    "port": 8080,
    "nginx_block": "location = ${PATH} { return 308 ${PATH}/; }\n\n# --- Main slug block (no redirect mangling) ---\nlocation ^~ ${PATH}/ {\n    rewrite ^${PATH}/(.*)$ /$1 break;\n\n    proxy_http_version 1.1;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection $connection_upgrade;\n    proxy_set_header Host $host;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header X-Forwarded-Proto $scheme;\n    proxy_set_header X-Forwarded-Host $host;\n    proxy_set_header X-Forwarded-Prefix ${PATH};\n    proxy_set_header X-Forwarded-Uri $request_uri;\n\n    # openHAB 3+/5 auth requirements\n    add_header Set-Cookie X-OPENHAB-AUTH-HEADER=1 always;\n    proxy_set_header Authorization \"\";\n\n    # make cookies work under the slug\n    proxy_cookie_path / ${PATH}/;\n\n    # --- rewrite root-absolute asset & API URLs to live under the slug ---\n    proxy_set_header Accept-Encoding \"\";   # let sub_filter see plain text\n    sub_filter_once off;\n    sub_filter_types text/html text/css application/javascript application/json text/plain;\n    sub_filter '=\"/'  '=\"${PATH}/';\n    sub_filter \"='/\"  \"='${PATH}/\";\n    sub_filter 'url(/' 'url(${PATH}/';\n    sub_filter '\"/rest'  '\"${PATH}/rest';\n    sub_filter \"'/rest\"  \"'${PATH}/rest\";\n\n    proxy_read_timeout 3600;\n    proxy_pass ${UPSTREAM};\n}\n\n# --- fallbacks for any stray root-absolute requests the app still makes ---\nlocation ^~ /js/     { proxy_set_header Accept-Encoding \"\"; proxy_pass ${UPSTREAM}; }\nlocation ^~ /css/    { proxy_set_header Accept-Encoding \"\"; proxy_pass ${UPSTREAM}; }\nlocation ^~ /images/ { proxy_set_header Accept-Encoding \"\"; proxy_pass ${UPSTREAM}; }\nlocation ^~ /res/    { proxy_set_header Accept-Encoding \"\"; proxy_pass ${UPSTREAM}; }\nlocation ^~ /rest/   { proxy_set_header Accept-Encoding \"\"; proxy_pass ${UPSTREAM}; }\nlocation = /favicon.ico          { proxy_pass ${UPSTREAM}; }\nlocation = /manifest.json        { proxy_pass ${UPSTREAM}; }\nlocation = /manifest.webmanifest { proxy_pass ${UPSTREAM}; }\n"
  }
]
