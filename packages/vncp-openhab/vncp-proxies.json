[
  {
    "slug": "openhab",
    "port": 8080,
    "nginx_block": "location = ${PATH} { return 308 ${PATH}/; }\n\n# --- FIX OIDC: normalize redirect_uri for the auth endpoint ---\n# If the app generated redirect_uri=http://localhost (no slug),\n# bounce to the same URL but with /openhab added to redirect_uri.\nlocation = ${PATH}/auth {\n    # only rewrite when redirect_uri is localhost/127.0.0.1 and missing the slug\n    if ($arg_redirect_uri ~* ^https?://(localhost|127\\.0\\.0\\.1)(/)?$) {\n        return 307 ${PATH}/auth?response_type=$arg_response_type&client_id=$arg_client_id&redirect_uri=$scheme://$host${PATH}&scope=$arg_scope&code_challenge_method=$arg_code_challenge_method&code_challenge=$arg_code_challenge&state=$arg_state;\n    }\n\n    proxy_http_version 1.1;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection $connection_upgrade;\n    proxy_set_header Host $host;\n    proxy_set_header X-Forwarded-Host $host;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header X-Forwarded-Proto $scheme;\n    proxy_set_header X-Forwarded-Prefix ${PATH};\n    proxy_set_header X-Forwarded-Uri $request_uri;\n\n    proxy_cookie_path / ${PATH}/;\n    absolute_redirect off;\n    proxy_redirect / ${PATH}/;\n\n    proxy_pass ${UPSTREAM};\n}\n\n# --- main slug block ---\nlocation ^~ ${PATH}/ {\n    rewrite ^${PATH}/(.*)$ /$1 break;\n\n    proxy_http_version 1.1;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection $connection_upgrade;\n    proxy_set_header Host $host;\n    proxy_set_header X-Forwarded-Host $host;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_set_header X-Forwarded-Proto $scheme;\n    proxy_set_header X-Forwarded-Prefix ${PATH};\n    proxy_set_header X-Forwarded-Uri $request_uri;\n\n    # keep absolute redirects under the slug\n    absolute_redirect off;\n    proxy_redirect ~^https?://[^/]+(\\/.*)?$ $scheme://$host${PATH}$1;\n    proxy_redirect / ${PATH}/;\n\n    # cookies scoped to slug\n    proxy_cookie_path / ${PATH}/;\n\n    # allow body rewriting\n    proxy_set_header Accept-Encoding \"\";\n    sub_filter_once off;\n    sub_filter_types *;\n\n    # common client-side absolute URL fixes\n    sub_filter '=\"/\"' '=\"${PATH}/\"';\n    sub_filter \"='/'\" \"='${PATH}/'\";\n    sub_filter 'window.location=\"/\"' 'window.location=\"${PATH}/\"';\n    sub_filter \"window.location='/'\" \"window.location='${PATH}/'\";\n    sub_filter 'location.href=\"/\"' 'location.href=\"${PATH}/\"';\n    sub_filter \"location.href='/'\" \"location.href='${PATH}/'\";\n    sub_filter 'location.replace(\"/\")' 'location.replace(\"${PATH}/\")';\n    sub_filter \"location.replace('/')\" \"location.replace('${PATH}/')\";\n\n    # generic root-absolute URL rewrites\n    sub_filter '=\"/' '=\"${PATH}/';\n    sub_filter \"='/\" \"='${PATH}/\";\n    sub_filter 'url(/' 'url(${PATH}/';\n\n    # webpack chunks + <base>\n    sub_filter '__webpack_require__.p=\"/' '__webpack_require__.p=\"${PATH}/';\n    sub_filter '<base href=\"/' '<base href=\"${PATH}/';\n\n    # frequent openHAB paths\n    sub_filter '\"/rest'  '\"${PATH}/rest';\n    sub_filter \"'/rest\"  \"'${PATH}/rest\";\n\n    proxy_pass ${UPSTREAM};\n}\n\n# (optional) fallbacks for any stray root-absolute requests\nlocation ^~ /rest/   { proxy_set_header Accept-Encoding \"\"; proxy_pass ${UPSTREAM}; }\nlocation = /favicon.ico          { proxy_pass ${UPSTREAM}; }\nlocation = /manifest.json        { proxy_pass ${UPSTREAM}; }\nlocation = /manifest.webmanifest { proxy_pass ${UPSTREAM}; }\n"
  }
]
